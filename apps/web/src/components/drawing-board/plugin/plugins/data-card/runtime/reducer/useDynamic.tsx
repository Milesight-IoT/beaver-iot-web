import type { ConfigureType, ViewConfigProps } from '../../typings';

export const useDynamic = () => {
    /**
     * Each form generated by dynamic generation
     */
    const generateFormItem = (title: string, index: string, value: Record<string, any>) => {
        return {
            $$type: 'dynamic',
            title,
            style: 'display: flex;margin-bottom: 20px;',
            components: [
                {
                    type: 'iconSelect',
                    key: `Icon_${index}`,
                    style: 'flex: 1;padding-right: 12px;',
                    defaultValue: value[`Icon_${index}`] || undefined,
                },
                {
                    type: 'iconColorSelect',
                    key: `IconColor_${index}`,
                    style: 'flex: 1;',
                    defaultValue: value[`IconColor_${index}`] || undefined,
                },
            ],
        };
    };

    /**
     * Generate dynamic configure logic
     */
    const dynamicConfigure = (
        currentEntity: Required<EntityOptionType>['rawData'],
        value: Record<string, any>,
    ) => {
        const { entityValueAttribute, entityId } = currentEntity || {};
        const { enum: enumStruct } = entityValueAttribute || {};

        // Non -enumeration
        if (!enumStruct) return [generateFormItem(`Appearance`, entityId?.toString(), value)];

        // Enumeration type
        return Object.keys(enumStruct || {}).map(enumKey => {
            const enumValue = enumStruct[enumKey];
            return generateFormItem(`Appearance of ${enumValue}`, enumKey, value);
        });
    };

    /** Dynamic rendering form */
    const updateDynamicForm = (value: ViewConfigProps, config: ConfigureType) => {
        const { entity } = value || {};
        // Get the current selection entity
        const { rawData: currentEntity } = entity || {};
        if (!currentEntity) return config;

        // Rendering dynamic form
        const result = dynamicConfigure(currentEntity, value);
        if (!result) return config;

        // Dynamic rendering form
        const { configProps } = config || {};
        const newConfigProps = [
            ...configProps.filter((item: any) => item.$$type !== 'dynamic'),
            ...result,
        ];
        config.configProps = newConfigProps;
        return config;
    };

    return {
        updateDynamicForm,
    };
};
